ext {
    awsLambdaJavaCoreVersion = "1.2.0"
    awsLambdaJavaEventsVersion = "2.2.7"
    awsLambdaJavaLog4j2Version = "1.1.0"
    awsJavaSdkVersion = "1.11.717"
    awsXrayJavaSdkVersion = "2.4.0"
    gradleVersion = "6.2.1"
    jacksonVersion = "2.10.2"
    junitVersion = "5.6.0"
    mockitoVersion = "2.7.22"
    mockitoJunitVersion = "3.3.0"
    log4jVersion = "2.13.0"
    slf4jVersion = "1.7.30"
    testContainersVersion = "1.12.5"
}

subprojects {
    apply plugin: "java"

    group = "de.mbe.tutorials.aws.serverless.movies"
    version = "1.0.0"

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenCentral()
    }
}

configure(subprojects) {
    dependencies {

        implementation "com.amazonaws:aws-lambda-java-core:$awsLambdaJavaCoreVersion"
        implementation "com.amazonaws:aws-lambda-java-events:$awsLambdaJavaEventsVersion"
        implementation "com.amazonaws:aws-lambda-java-log4j2:$awsLambdaJavaLog4j2Version"

        implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
        implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
        implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"

        implementation platform("com.amazonaws:aws-xray-recorder-sdk-bom:$awsXrayJavaSdkVersion")
        implementation "com.amazonaws:aws-xray-recorder-sdk-core"
        implementation "com.amazonaws:aws-xray-recorder-sdk-aws-sdk"

        implementation platform("com.amazonaws:aws-java-sdk-bom:$awsJavaSdkVersion")

        testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
        testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoJunitVersion"
        testImplementation "org.testcontainers:testcontainers:$testContainersVersion"
        testImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    }

    task buildZip(type: Zip) {
        from compileJava
        from processResources
        into("lib") {
            from configurations.runtimeClasspath
        }
        archiveFileName = "${project.name}.zip"
    }

    build.dependsOn buildZip

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

wrapper {
    gradleVersion = "${gradleVersion}"
    distributionType = Wrapper.DistributionType.ALL
}